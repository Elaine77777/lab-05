---
title: "Acquisition"
author: "Elaine Lu"
format:
  html:
    number-sections: true
    number-depth: 2
bibliography: ../packages.bib
---

# Description of Data

```{r}
#| label: set-up/load-packages
#| message: false

library(dplyr) # data manipulation
library(readr) # data import/ export
library(gutenbergr) # Project Gutenberg API
library(fs)
```

```{r}
glimpse(gutenberg_metadata)
glimpse(gutenberg_authors)
glimpse(gutenberg_subjects)
```

## The nature/source/acquisition of data

[Gutenberg](https://www.gutenberg.org/) is an open-access online database that include literature from all over the world, which are now in the public domain and are therefore free for users to download. In the database we download, we use API for accessing Gutenberg database with the `gutenbergr` package [@R-gutenbergr] and use R to process that.

We can manually download books we want to our local data file, using `gutenberg_ids` the website provides, subset the data we need to write it into a new csv file, and begin to analyze that.

## The format of data:

Gutenberg offers multiple forms of text files, but I think we mainly use txt forms for this project, and a Project Gutenberg text file often includes: Title of the book, Author(s) of the book, Language of the text, Publication date, Gutenberg license information, and Any additional metadata specific to the book.

## The license of data:

Since Gutenberg is an open-access database, the majority of texts are released under the Project Gutenberg License, which typically allows for unrestricted use, redistribution, and modification, with some restrictions like prohibiting commercial use without permission.

# Data Collection

I already previewed the data in the previous step, so in this part, I will select data I want, write all the text fit my requirements in the database to a CSV file, and eventually write a customize function to save both mine and my reproducer's time in the future.

First, assume that I'm interested in making a comparative analysis about **Charles Dickens**, **William Shakespeare**, and **Jane Austin**, so I will first filter all their works from the database:

```{r}
#| label: filter-authors

# Create a vector of authors I want to filter
my_authors <-c("Dickens, Charles", "Austen, Jane", "Shakespeare, William")

author_info_tbl<-
  gutenberg_authors |>
  # Filter all the authors I want, which are listed in my_authors
  filter(author %in% my_authors)

# Print the table
author_info_tbl
```

<!--
You likely do not need to filter the authors by the LCC classification, as the authors are already selected. The LCC classification would be useful if for some reason you wanted to filter certain works by the authors that fit in distinct categories.

-->

Then, I select the works from the Library of Congress Classification (since they are all English novelists, I just need to filter PR, not PS), and I want to count make sure all the files I downloaded include text in
English:

<!--

I set the code block option `eval: false` to avoid running the code block, as it is not necessary to run the code block to complete the analysis.

-->

```{r}
#| label: filter-works-lcc
#| eval: false

subjects <-
  gutenberg_subjects |>
  filter(
    subject_type == "lcc",
    subject %in% c("PR")
  )
```

```{r}
#| label: filter-works-by-gutenberg-author-id

 works_info_tbl <-
  gutenberg_metadata |>
    filter(gutenberg_author_id %in% author_info_tbl$gutenberg_author_id) |>
  # Filter all the texts in English
  filter(language == "en") |>
  # Make sure all the files have text in it
  filter(has_text) |>
  filter(rights == "Public domain in the USA.") |>
    arrange(author) # arrange by authors

# Print the table
works_info_tbl
```

This operation results in a table of works by the authors I am interested in. To see how many works are available for each author, I can use the `count` function:

```{r}
#| label: count-works-selected

works_info_tbl |>
  count(author)
```

It looks like an overwhelming number of works are from Shakespeare. Just something to keep in mind when I start to analyze the data.


Last but not least, I want to run a quick test to make sure everything works in the way that I want, before writing them into a csv file and store them in my data file:


<!-- Avoid spaces in lable names -->
```{r}
#|label: download-files

works_ca_sample <-
  gutenberg_download(gutenberg_id = works_info_tbl$gutenberg_id[1:5],
    meta_field = c("title", "author", "gutenberg_id"))

works_ca_sample
```

Now that all the test is done, and all data and code seem fine, I can write my data collection into a csv file:

**Code Block for csv**

I can also customize the whole thing and write an if statement to check whether or not I downloaded everything, to make it easier for me to use for the next time:

```{r}
#| label: write-gutenberg-works-data

write_csv(works_info_tbl, "../data/original/english_authors_works.csv")
```

**Code Block for Customize Function**

<!--

You could write a function to make this process easier for you and your reproducer. The function could take the authors' names or ids and a path to save the file as arguments.

This would be above and beyond the requirements for this project, but it could be a useful exercise to practice writing functions.

-->

# Self-assessment

## What did you learn?

I learned how to use APIs to download data I want from online database, how to "combine" using code, if statement, how I can write customize functions, and how to write my data into a csv file.

<!--

Great! The logic you used is sound. There were a few small errors that I corrected in the code, but overall, you did a great job.

-->

## What did you find most/ least challenging?

The part I found most challenging was to debug, oftentimes I don't know and couldn't tell what is wrong with my code, but now I know I can use chatgpt to debug for me, which makes my life much easier.

<!--
Debugging is a challenge, for sure. Here are some suggestions for debugging:

- Break the code into smaller pieces and test each piece separately.
- Create a minimal example that reproduces the error.
- Use `print` statements to check the values of variables at different points in the code.

You can also use AI tools like ChatGPT to help you debug your code, just make sure that you have the AI tool explain the code to you so that you can understand the error and fix it yourself in the future.

-->


## What resources did you consult?

Instructor, [Chatgpt](https://chat.openai.com/), and [Gutenberg's mirror website](https://www.gutenberg.org/MIRRORS).

<!--

If for some reason you continue to have trouble with 'mirros', you can set a miror explicitly. In the `gutenberg_download` function, you can set the mirror to the URL of the mirror you want to use. For example, `mirror = "http://gutenberg.pglaf.org"`.

Example:

```{r}
#| label: download-files-with-specific-mirror
#| eval: false

gutenberg_download(
  gutenberg_id = works_info_tbl$gutenberg_id[1:5],
  meta_field = c("title", "author", "gutenberg_id"),
  mirror = "http://gutenberg.pglaf.org")
```

-->

## What more would you like to know about acquiring data?

E.g. how to download the most frequently downlowded books from gutenberg.

<!--

This would need to be the combination of a web scrape of the Project Gutenberg listing of the top books to get the author ids, and then you could use these ids, has you have in this project, to download the books.

Example with `rvest`

-->

```{r}
#| label: web-scrape-top-books
#| eval: false

# Load the rvest package
library(rvest)
library(stringr)

# Read the html page
html <-
  read_html("https://www.gutenberg.org/browse/scores/top")

top_last_day_works <-
  html |>
  html_elements("h2.books-last1, ol li a") |>
  html_attr("href") |>
  str_subset("ebooks") |>
  str_extract("\\d+") |>
  unique() |>
  as.numeric()

top_last_day_works
```
